---
import { LOCALE, SITE } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin
).href;
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />

    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/assets/favicon/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/assets/favicon/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/assets/favicon/favicon-16x16.png"
    />
    <link rel="manifest" href="/assets/favicon/site.webmanifest" />

    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,500;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ViewTransitions />

    <script is:inline src="/toggle-theme.js"></script>
    <script is:inline>
      let timerAnchor;
      document.addEventListener("DOMContentLoaded", () => {
        document
          .querySelectorAll("time[datetime]")
          .forEach(function (timeElement) {
            const utcTimeString = timeElement.getAttribute("datetime");
            const utcDate = new Date(utcTimeString);
            const localTimeString = utcDate.toLocaleString();
            timeElement.textContent = localTimeString;
            timeElement.textContent =
              localTimeString + " (UTC: " + utcTimeString + ")";

            let nextSibling = timeElement.nextElementSibling;
            for (let i = 0; i < 3 && nextSibling; i++) {
              if (nextSibling.tagName.toLowerCase() === "span") {
                nextSibling.parentNode.removeChild(nextSibling);
                nextSibling = timeElement.nextElementSibling;
              } else {
                break;
              }
            }
          });
        
        document.addEventListener('click', function(e) {
          const links = document.getElementById('article').getElementsByTagName('a');
          for (let i = 0; i < links.length; i++) {
            const match = links[i].hash.match(/#(.*)-fnref-\d+$/);
            if (match) {
              links[i].onclick = function (event) {
                const target = event.srcElement || event.target;
                timerAnchor = setInterval(checkAnchorInViewport, 100, target.hash);
              };
            }
          }
        });
        
        function checkAnchorInViewport(hash) {
          const el = document.getElementById(hash.slice(1, hash.length));
          if (isElInViewport(el)) {
            clearInterval(timerAnchor);

            el.classList.add('blinking');
            setTimeout(() => { el.classList.remove('blinking'); }, 1000);
          }
        }

        function isElInViewport(element) {
          const rect = element.getBoundingClientRect();
          return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
          );
        }
      });
    </script>
    <style>
      @font-face {
        font-family: "astro";
        src: url("/assets/fonts/astro.ttf") format("truetype");
        font-weight: normal;
        font-style: normal;
        font-display: swap;
      }
    </style>
  </head>
  <body>
    <slot />
  </body>
</html>
